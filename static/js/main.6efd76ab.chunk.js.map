{"version":3,"sources":["logo.svg","components/MessagePanel/index.js","components/InputPanel/index.js","components/ChatApp/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","memo","messages","removeMessage","useState","isButtonVisible","setIsButtonVisible","handleRemove","index","placeRemoveButton","className","map","message","key","onMouseLeave","onMouseEnter","onClick","updateMessages","setMessage","handleSend","useCallback","evt","preventDefault","handleMessageChange","target","value","onSubmit","type","onChange","disabled","ChatApp","setMessages","temp","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,wLCyC5BC,sBAvCR,YAAoD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAAiB,EACVC,oBAAU,GADA,mBACjDC,EADiD,KAChCC,EADgC,KAExD,SAASC,EAAaC,GACpB,OAAO,WACLL,EAAcK,IAGlB,SAASC,EAAkBD,GACzB,OAAO,kBAAMF,EAAmBE,IAOlC,OACE,6BAASE,UAAU,iBAChBR,EAASS,KAAI,SAACC,EAASJ,GACtB,OACE,yBACEK,IAAKL,EACLE,UAAU,gBACVI,aAXD,WACLR,GAAoB,KAYd,wBAAII,UAAU,UAAUK,aAAcN,EAAkBD,IACrDI,GAEFP,GAAmBG,EAClB,4BAAQQ,QAAST,EAAaC,GAAQE,UAAU,UAAhD,UAGE,a,MCUDT,sBAvCf,YAAyC,IAAnBgB,EAAkB,EAAlBA,eAAkB,EACRb,mBAAS,IADD,mBAC/BQ,EAD+B,KACtBM,EADsB,KAGhCC,EAAaC,uBACjB,SAACC,GACCA,EAAIC,iBACJL,EAAeL,GACfM,EAAW,MAEb,CAACN,IAGGW,EAAsBH,uBAC1B,SAACC,GACCH,EAAWG,EAAIG,OAAOC,SAExB,CAACb,IAGH,OACE,6BACE,0BAAMc,SAAUP,GACd,8BACET,UAAU,QACViB,KAAK,OACLC,SAAUL,EACVE,MAAOb,IAET,4BACEF,UAAU,cACVmB,UAAUjB,EACVe,KAAK,UAHP,a,MC5BD,SAASG,IAAW,IAAD,EACQ1B,mBAAS,IADjB,mBACjBF,EADiB,KACP6B,EADO,KAGlBd,EAAiBG,uBACrB,SAACR,GACCmB,EAAY,GAAD,mBAAK7B,GAAL,CAAeU,OAE5B,CAACV,IAEGC,EAAgBiB,uBACpB,SAACZ,GACC,IAAIwB,EAAI,YAAO9B,GACf8B,EAAKC,OAAOzB,EAAO,GACnBuB,EAAY,YAAIC,MAElB,CAAC9B,IAGH,OACE,yBAAKQ,UAAU,WACb,2CACA,kBAAC,EAAD,CACER,SAAUA,EACVC,cAAeA,IAEjB,6BACA,kBAAC,EAAD,CAAYc,eAAgBA,KAInBhB,eAAK6B,GCrBLI,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAACoB,EAAD,QCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxC,c","file":"static/js/main.6efd76ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { memo, useState } from \"react\";\nimport \"./messagePanel.css\";\nexport function MessagePanel({ messages, removeMessage }) {\n  const [isButtonVisible, setIsButtonVisible] = useState(-1);\n  function handleRemove(index) {\n    return () => {\n      removeMessage(index);\n    };\n  }\n  function placeRemoveButton(index) {\n    return () => setIsButtonVisible(index);\n  }\n  function hideRemoveButton(index) {\n    return () => {\n      setIsButtonVisible(-1);\n    };\n  }\n  return (\n    <section className=\"messagesPanel\">\n      {messages.map((message, index) => {\n        return (\n          <div\n            key={index}\n            className=\"message-block\"\n            onMouseLeave={hideRemoveButton(index)}\n          >\n            <h3 className=\"message\" onMouseEnter={placeRemoveButton(index)}>\n              {message}\n            </h3>\n            {isButtonVisible == index ? (\n              <button onClick={handleRemove(index)} className=\"button\">\n                Remove\n              </button>\n            ) : null}\n          </div>\n        );\n      })}\n    </section>\n  );\n}\n\nexport default memo(MessagePanel);\n","import React, { memo, useCallback, useState } from \"react\";\nimport { messagePanel } from \"../MessagePanel\";\nimport \"./inputPanel.css\";\n\nfunction InputPanel({ updateMessages }) {\n  const [message, setMessage] = useState(\"\");\n\n  const handleSend = useCallback(\n    (evt) => {\n      evt.preventDefault();\n      updateMessages(message);\n      setMessage(\"\");\n    },\n    [message]\n  );\n\n  const handleMessageChange = useCallback(\n    (evt) => {\n      setMessage(evt.target.value);\n    },\n    [message]\n  );\n\n  return (\n    <div>\n      <form onSubmit={handleSend}>\n        <textarea\n          className=\"input\"\n          type=\"text\"\n          onChange={handleMessageChange}\n          value={message}\n        ></textarea>\n        <button\n          className=\"send_button\"\n          disabled={message ? false : true}\n          type=\"submit\"\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\nexport default memo(InputPanel);\n","import React, { memo, useCallback, useState } from \"react\";\nimport InputPanel from \"../InputPanel\";\nimport MessagePanel from \"../MessagePanel\";\nimport \"./chatApp.css\";\nexport function ChatApp() {\n  const [messages, setMessages] = useState([]);\n\n  const updateMessages = useCallback(\n    (message) => {\n      setMessages([...messages, message]);\n    },\n    [messages]\n  );\n  const removeMessage = useCallback(\n    (index) => {\n      let temp = [...messages];\n      temp.splice(index, 1);\n      setMessages([...temp]);\n    },\n    [messages]\n  );\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Let's Chat </h1>\n      <MessagePanel\n        messages={messages}\n        removeMessage={removeMessage}\n      ></MessagePanel>\n      <hr></hr>\n      <InputPanel updateMessages={updateMessages}></InputPanel>\n    </div>\n  );\n}\nexport default memo(ChatApp);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ChatApp } from './components/ChatApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatApp></ChatApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}